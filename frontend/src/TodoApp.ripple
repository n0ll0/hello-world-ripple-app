import { effect, track, TrackedMap, untrack, TrackedObject } from 'ripple';
import type { Todo } from '@/types.ts';
import { getTodos, editTodo, getTodo, deleteTodo, createTodo, login } from '@/useApi.ts';
import {TODOS} from '@/context/todos.ripple'
import './TodoApp.css'
var _IDCNT_ = 0;

component EditTodo<T = Todo>({ getTodo, setTodo }: {getTodo:()=>Tracked<T>,setTodo:(T)=>void}) {
	const popover_id = _IDCNT_++;
	<div>
		<button type='button' popovertarget={`_${popover_id}`} popovertargetaction='show' class="btn btn-secondary">{'Edit'}</button>
		<div id={`_${popover_id}`} popover='auto'>
			<div class='modal'>
				<form onsubmit={(e: SubmitEvent) => {
						e.preventDefault();
						console.log(e);
						const data = new FormData(e.target);
						console.log(data);
						const title = data.get('title');
						console.log(title);
						if (title?.trim().length == 0) {
							throw new Error("You should actually do something");
						}
						const todo = getTodo();
						console.log(todo);
						@todo.title = title;
						console.log(todo);
						setTodo(todo);
					}}>
					<input type='text' name='title' value={getTodo().@title} />
					<button type='submit' class="btn btn-primary">{'Save'}</button>
					<button type="button" popovertarget={`_${popover_id}`} popovertargetaction='hide'>{'Cancel'}</button>
				</form>
			</div>
		</div>
	</div>

	<style>
		.modal {
			display: flex;
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: #0004;
			align-items: center;
			justify-content: center;
		}
	.modal form {
			background: #fff;
			padding: 24px;
			border-radius: 8px;
			box-shadow: 0 2px 8px #0003;
			display: flex;
			flex-direction: column;
			gap: 12px;
		}
	</style>
}

export default component TodoApp() {
	// console.log(ripple("hi"));
	const {todos, addTodo, r_editTodo, removeTodo} = TODOS();

	let popoverState = new TrackedObject({ openId: null, x: 0, y: 0 });
	effect(() => {
		console.log('Popover state changed:', @popoverState.openId, @popoverState.x, @popoverState.y);
	});
	
	document.addEventListener("click", (e)=>{
		// Close popover when clicking outside of it
		if (@popoverState.openId && !e.target.closest('.popover-content')) {
			@popoverState.openId = null;
		}
	})
	<div style="max-width:80ch;text-align:left;">
		<h1>{'Todo List'}</h1>
		<form onsubmit={(e: SubmitEvent) => {
		console.log(e);
		console.log(e.target);
		e.preventDefault();

		const data = new FormData(e.target);
			const title = data.get("title");
			if (title?.trim()?.length == 0) {

				throw new Error("You should do something");
			}
		console.log(data);

		addTodo({
		title: data.get('title'),
		});

		e.target.reset();
	}}>
			<input type='text' placeholder='Add a todo...' name='title' />
			<button type='submit'>{'Add'}</button>
		</form>
		<div style="display:flex; flex-flow:row wrap; gap:1em; padding: 2em; background-color: #13a1; border-radius: 1em;">

			for (const pair of todos) {
				const id = pair[0];
				const popover_id = `popover_${id}`;
				let todo = @todos.get(id);
				effect(() => {
					console.log(@todo);
				});
				<div class="todo">
					<span>{@todo.@title}</span>
					<div style="position:relative;">
						<button type="button"
							tabindex="0"
							style="background:none;border:none;cursor:pointer;"
							onclick={e => {
								e.stopPropagation();
								console.log('Button clicked!', popover_id);
								const rect = e.target.getBoundingClientRect();
								console.log('Rect:', rect);
								
								// Estimated popover dimensions
								const popoverWidth = 120;
								const popoverHeight = 100;
								
								// Calculate initial position - to the left of the button
								let x = rect.left + window.scrollX - popoverWidth;
								let y = rect.bottom + window.scrollY + 12;
								
								// Check if popover would go off the left edge
								if (x < window.scrollX) {
									// If it goes off left, position to the right instead
									x = rect.right + window.scrollX;
								}
								
								// Check if popover would go off the right edge
								if (x + popoverWidth > window.innerWidth + window.scrollX) {
									x = window.innerWidth + window.scrollX - popoverWidth - 10;
								}
								
								// Check if popover would go off the bottom edge
								if (y + popoverHeight > window.innerHeight + window.scrollY) {
									y = rect.top + window.scrollY - popoverHeight - 6;
								}
								
								// Check if popover would still go off the top edge
								if (y < window.scrollY) {
									y = window.scrollY + 10;
								}

								@popoverState.x = x;
								@popoverState.y = y;
								@popoverState.openId = popover_id;
								console.log('Set state:', @popoverState.openId, @popoverState.x, @popoverState.y);
							}}
						>{'â‹®'}</button>
						
						if (@popoverState.openId === popover_id) {
							<div
								class="popover-content"
								style={`position: fixed; left: ${@popoverState.x}px; top: ${@popoverState.y}px; background: #fff; border: 1px solid #ccc; box-shadow: 0 2px 8px #0002; z-index: 1000; padding: 0.5em; border-radius: 6px; min-width: 120px;`}
								onclick={(e) => e.stopPropagation()}
							>
								<div style="display: flex; flex-direction: column; gap: 0.5em;">
									<button onclick={() => { removeTodo(id); @popoverState.openId = null; }} class="btn btn-danger">{'Delete'}</button>
									<EditTodo getTodo={() => @todo} setTodo={async (newTodo) => { await r_editTodo(id, newTodo); @popoverState.openId = null; }} />
								</div>
							</div>
						}
					</div>
				</div>
			}
    </div>
	</div>
}