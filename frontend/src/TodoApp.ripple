import { effect, TrackedObject } from 'ripple';
import type { Todo } from '@/types.ts';
import { getTodos, editTodo, getTodo, deleteTodo, createTodo, login } from '@/useApi.ts';
import { TodosContext } from '@/context/todos.ripple';
import { AnchoredPopover, AnchoredPopoverTrigger, AnchoredPopoverContent } from './components/Popover.ripple';
import '@/TodoApp.css';

var _IDCNT_ = 0;

component EditTodo({ todo }) {
	const ctx = TodosContext.get();
	const id = @todo.id;
	const popover_id = _IDCNT_++;

	<button
		type="button"
		popovertarget={`_${popover_id}`}
		popovertargetaction="show"
		class="btn btn-secondary"
	>

		{'Edit'}

	</button>
	<div id={`_${popover_id}`} popover="auto">

		<div class="modal">

			<form
				class="modalform"
				onsubmit={(e: SubmitEvent) => {
					e.preventDefault();
					console.log(e);
					const data = new FormData(e.target);
					console.log(data);
					const title = data.get('title');
					const completed = Boolean(data.get('completed'));
					console.log(title, completed);
					if (title.trim().length == 0) {
						throw new Error('You should actually do something');
					}
					@todo.title = title;
					@todo.completed = completed;
					console.log(todo);
					ctx.r_editTodo(id, todo);
				}}
			>
				<label for={`input_title_${popover_id}`}>{'title'}</label>
				<input
					id={`input_title_${popover_id}`}
					type="text"
					name="title"
					value={@todo.title}
				/>
				<label for={`input_completed_${popover_id}`}>
					{'completed'}
					<input
						id={`input_completed_${popover_id}`}
						type="checkbox"
						name="completed"
						checked={@todo.completed}
					/>
				</label>
				<button type="submit" class="btn btn-primary">{'Save'}</button>
				<button type="button" popovertarget={`_${popover_id}`} popovertargetaction="hide">
					{'Cancel'}
				</button>
			</form>
		</div>
	</div>

	<style>
	  .modal {
			display: flex;
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: #0004;
			align-items: center;
			justify-content: center;
		}
		  .modalform {
			background: #fff;
			padding: 24px;
			border-radius: 8px;
			box-shadow: 0 2px 8px #0003;
			display: flex;
			flex-direction: column;
			gap: 12px;
		}
	</style>
}

component CreateTodo() {
	const ctx = TodosContext.get();
	<form
		onsubmit={(e: SubmitEvent) => {
			console.log(e);
			console.log(e.target);
			e.preventDefault();

			const data = new FormData(e.target);
			const title = data.get('title');

			if (title.length == 0) {
				throw new Error('You should do something');
			}
			console.log(data);
			ctx.addTodo({
				title: data.get('title'),
			});
			e.target.reset();
		}}
	>
		<input type="text" placeholder="Add a todo..." name="title" />
		<button type="submit">{'Add'}</button>
	</form>
}

component TodoList() {
	const ctx = TodosContext.get();
	<div
		style="display:flex; flex-flow:row wrap; gap:1em; padding: 2em; background-color: #13a1; border-radius: 1em;"
	>
		if (@ctx.todos.length == 0) {
			<p>{'No todos'}</p>
		} else {
			for (const [id, todo] of @ctx.todos) {
				<div class="todo">
					<span>{@todo.title}</span>
					<AnchoredPopover>
						<AnchoredPopoverTrigger
							style="background:none;border:none;cursor:pointer;"
							type="button"
							tabindex="0"
						>
							{'â‹®'}
						</AnchoredPopoverTrigger>
						<AnchoredPopoverContent>
							<div style="display: flex; flex-direction: column; gap: 0.5em;">
								<button
									onclick={() => {
										@ctx.removeTodo(id);
									}}
									class="btn btn-danger"
								>
									{'Delete'}
								</button>
								<EditTodo todo={todo} />
							</div>
						</AnchoredPopoverContent>
					</AnchoredPopover>
				</div>
			}
		}
	</div>
}

export default component TodoApp() {
	<div style="max-width:80ch;text-align:left;">
		<CreateTodo />
		<h1>{'Todo List'}</h1>

		<TodoList />
	</div>
}
