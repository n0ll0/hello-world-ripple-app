
import { effect, track, TrackedMap, untrack } from 'ripple';
// import type { r_Todo } from './types.ts';
import { ripple, unripple } from '@/types.ts';
import { getTodos, editTodo, getTodo, deleteTodo, createTodo, login } from '@/useApi.ts';
var _IDCNT_ = 0;

function TODOS() {
	const $todos = new TrackedMap<string,r_Todo>();
	effect(async()=>{
		const loginres = await login({username: "uko", password: "uko"})
		console.log(loginres);
		const {data: todos} = await getTodos();
		console.log(todos)
		if (todos) {
			for (const $todo of todos) {
				$todos.set($todo.id, ripple($todo));
				// effect(()=>{
				// 	editTodo($todo.id, unripple(untrack($todo)))
				// });
			}
		}
	})
	effect(() => {
		console.log($todos);
	});

	async function addTodo(todo) {
		const tempId = crypto.randomUUID();
    $todos.set(tempId, ripple(todo));
		const {data: $todo} = await createTodo(todo);

		$todos.delete(tempId);
		$todos.set($todo.id, ripple($todo));
	}

	async function r_editTodo(id, newTodo) {
		$todos.set(id, ripple(newTodo)); // Trigger reactivity by creating a new object
		const {data: _todo} = await editTodo(id, unripple(newTodo))
		$todos.set(id, ripple(_todo)); // Trigger reactivity by creating a new object
	}

	function removeTodo(id) {
    $todos.delete(id);
	}

	return {$todos, addTodo, r_editTodo, removeTodo};
}

component EditTodo({ getTodo, setTodo }: {getTodo:()=>any,setTodo:(any)=>void}) {
	<div>
    const popover_id = _IDCNT_++;
		<button type='button' popovertarget={`_${popover_id}`} popovertargetaction='show' class="btn btn-secondary">{'Edit'}</button>
		<div id={`_${popover_id}`} popover='auto'>
			<div class='modal'>
				<form onsubmit={(e: SubmitEvent) => {
						e.preventDefault();
						const data = new FormData(e.target);
						const title = data.get('title');
						if (title?.trim().length == 0) {
							throw new Error("You should actually do something");
						}
						const todo = getTodo();
						todo.$title = title;
						console.log(todo);
						setTodo(todo);
					}}>
					<input type='text' name='title' value={getTodo().$title} />
					<button type='submit' class="btn btn-primary">{'Save'}</button>
					<button type="button" popovertarget={`_${popover_id}`} popovertargetaction='hide'>{'Cancel'}</button>
				</form>
			</div>
		</div>
	</div>

	<style>
	  .modal {
			display: flex;
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: #0004;
			align-items: center;
			justify-content: center;
		}
    .modal form {
			background: #fff;
			padding: 24px;
			border-radius: 8px;
			box-shadow: 0 2px 8px #0003;
			display: flex;
			flex-direction: column;
			gap: 12px;
		}
	</style>
}

export default component TodoApp() {
	// console.log(ripple("hi"));
	const {$todos, addTodo, r_editTodo, removeTodo} = TODOS();
	<div style='max-width: 80ch; text-align: left;'>
		<h1>{'Todo List'}</h1>
		<form onsubmit={(e: SubmitEvent) => {
      console.log(e);
      console.log(e.target);
      e.preventDefault();

      const data = new FormData(e.target);
			const title = data.get("title");
			if (title?.trim()?.length == 0) {

				throw new Error("You should do something");
			}
      console.log(data);

      addTodo({
        title: data.get('title'),
      });

      e.target.reset();
    }}>
			<input type='text' placeholder='Add a todo...' name='title' />
			<button type='submit'>{'Add'}</button>
  	</form>
		<div style="display:flex; flex-flow:row wrap;">
			for (const pair of $todos) {
				const id = pair[0];
				let $todo = $todos.get(id);
				effect(() => {
					console.log($todo);
				});
				<div class="todo">
					<span>{$todo.$title}</span>
					const popover_id = `popover_${_IDCNT_++}`;
					<div style="position:relative;" id={`anchor_${popover_id}`}>
						<button type="button"
						popovertarget={popover_id}
							tabindex="0"
						>
							{'â‹®'}
						</button>
						<div
							id={popover_id}
							popover="auto"
							style="
								position: absolute;
								top: 0;
								right: 2em;
								background: #fff;
								border: 1px solid #ccc;
								box-shadow: 0 2px 8px #0002;
								z-index: 10;
								padding: 0.5em;
								border-radius: 6px;
								min-width: 120px;
							"
						>
							<div style="display: flex; flex-direction: column; gap: 0.5em;">
								<button onclick={() => { removeTodo(id); }} class="btn btn-danger">{'Delete'}</button>
								<EditTodo getTodo={() => $todo} setTodo={async (newTodo) => { await r_editTodo(id, newTodo); }} />
							</div>
						</div>
					</div>
				</div>
			}
    </div>
	</div>
	<style>
	.todo {
		padding:0.5em;
		border: 1px solid gray;

		display:flex;
		flex: 1;
		justify-content:space-between;
		align-items:center;
		gap:0.5em;
	}
	</style>
}
